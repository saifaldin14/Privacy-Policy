{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","className","href","id","target","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2JAAAA,EAAOC,QAAU,IAA0B,kC,0GCyG5BC,MArGf,WACE,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,kDAEF,8BACE,8CACA,0LAGA,yMAEA,mVAIA,4MAEA,6BACA,2BAAG,mEACH,0VAIA,iiBAOsC,uBAClCC,KAAK,+CAD6B,+CAPtC,KASA,6BACA,2BAAG,6CACH,keAKA,6BACA,2BAAG,4CACH,sPAGA,gcAKA,6BACA,2BAAG,sDACH,gHACA,4BACE,0DACA,qEACA,uEACA,mFAEF,sSAGA,6BACA,2BAAG,6CACH,oVAIA,6BACA,2BAAG,yDACH,yaAKA,6BACA,2BAAG,4DACH,meAKA,6BACA,2BAAG,mEACH,yTAGA,6BACA,2BAAG,+CACH,qKACyC,uBAAGA,KAAK,KAAR,iCAEzC,6BACA,uBAAGC,GAAG,YAAN,2CAAyD,uBAAGD,KAAK,oCAC/DE,OAAO,UADgD,6BAAzD,QCtFYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e93a7825.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <title>Privacy Policy</title>\n      </header>\n      <body>\n        <h2>Privacy Policy</h2>\n        <p>Saif Al-Din Ali built the MyHeart app as an open source and free\n        app. This SERVICE is provided by Saif Al-Din Ali at no cost and is intended\n        for use as is.</p>\n        <p>This page is used to inform website visitors regarding our policies with the collection, use, and\n        disclosure of Personal Information if anyone decided to use our Service.</p>\n        <p>If you choose to use our Service, then you agree to the collection and use of information in\n        relation with this policy. The Personal Information that we collect are used for providing and\n        improving the Service. We will not use or share your information with anyone except as described\n        in this Privacy Policy.</p>\n        <p>The terms used in this Privacy Policy have the same meanings as in our Terms and Conditions,\n        which is accessible at MyHeart, unless otherwise defined in this Privacy Policy.</p>\n        <br />\n        <p><strong>Information Collection and Use</strong></p>\n        <p>For a better experience while using our Service, we may require you to provide us with certain\n        personally identifiable information, including but not limited to\n        users name, email address, location, and pictures.\n        The information that we request is will be retained by us and used as described in this privacy policy.</p>\n        <p>The app does use third party services that may collect information used to identify you. MyHeart uses Firebase\n        Authentication\n        to verify the users' identify through email and password. Also we use Firebase\n        Cloud Storage to collect user images. Finally we use the Firebase Realtime Database and the Cloud Firestore to\n        collect\n        user information such as name, weight, age, workout logs, and run data. We collect this information to improve\n        our services and enahnce user experience.\n        To view Google's privacy policy visit <a\n            href=\"https://firebase.google.com/support/privacy\">https://firebase.google.com/support/privacy</a>.</p>\n        <br />\n        <p><strong>Log Data</strong></p>\n        <p>We want to inform you that whenever you use our Service, in case of an error in the app we collect\n        data and information (through third party products) on your phone called Log Data. This Log Data\n        may include information such as your devices’s Internet Protocol (“IP”) address, device name,\n        operating system version, configuration of the app when utilising our Service, the time and date\n        of your use of the Service, and other statistics.</p>\n        <br />\n        <p><strong>Cookies</strong></p>\n        <p>Cookies are files with small amount of data that is commonly used an anonymous unique identifier.\n        These are sent to your browser from the website that you visit and are stored on your devices’s\n        internal memory.</p>\n        <p>This Services does not uses these “cookies” explicitly. However, the app may use third party code\n        and libraries that use “cookies” to collection information and to improve their services. You\n        have the option to either accept or refuse these cookies, and know when a cookie is being sent\n        to your device. If you choose to refuse our cookies, you may not be able to use some portions of\n        this Service.</p>\n        <br />\n        <p><strong>Service Providers</strong></p>\n        <p>we may employ third-party companies and individuals due to the following reasons:</p>\n        <ul>\n          <li>To facilitate our Service;</li>\n          <li>To provide the Service on our behalf;</li>\n          <li>To perform Service-related services; or</li>\n          <li>To assist us in analyzing how our Service is used.</li>\n        </ul>\n        <p>We want to inform users of this Service that these third parties have access to your Personal\n        Information. The reason is to perform the tasks assigned to them on our behalf. However, they\n        are obligated not to disclose or use the information for any other purpose.</p>\n        <br />\n        <p><strong>Security</strong></p>\n        <p>We value your trust in providing us your Personal Information, thus we are striving to use\n        commercially acceptable means of protecting it. But remember that no method of transmission over\n        the internet, or method of electronic storage is 100% secure and reliable, and we cannot\n        guarantee its absolute security.</p>\n        <br />\n        <p><strong>Links to Other Sites</strong></p>\n        <p>This Service may contain links to other sites. If you click on a third-party link, you will be\n        directed to that site. Note that these external sites are not operated by us. Therefore, we\n        strongly advise you to review the Privacy Policy of these websites. We have no control over, and\n        assume no responsibility for the content, privacy policies, or practices of any third-party\n        sites or services.</p>\n        <br />\n        <p><strong>Children’s Privacy</strong></p>\n        <p>This Services do not address anyone under the age of 13. We do not knowingly collect personal\n        identifiable information from children under 13. In the case we discover that a child under 13\n        has provided us with personal information, we immediately delete this from our servers. If you\n        are a parent or guardian and you are aware that your child has provided us with personal\n        information, please contact us so that we will be able to do necessary actions.</p>\n        <br />\n        <p><strong>Changes to This Privacy Policy</strong></p>\n        <p>We may update our Privacy Policy from time to time. Thus, you are advised to review this page\n        periodically for any changes. We will notify you of any changes by posting the new Privacy Policy\n        on this page. These changes are effective immediately, after they are posted on this page.</p>\n        <br />\n        <p><strong>Contact Us</strong></p>\n        <p>If you have any questions or suggestions about our Privacy Policy, do not hesitate to contact\n        us. You can contact us through email at: <a href=\"#\">saifaldindeveloper@gmail.com</a>\n        </p>\n        <br />\n        <p id=\"template\">This Privacy Policy page was created at <a href=\"https://privacypolicytemplate.net\"\n          target=\"_blank\">privacypolicytemplate.net</a>.</p>\n      </body>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}